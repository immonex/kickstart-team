<?php
/**
 * Class Base_Schema
 *
 * @package immonex\KickstartTeam
 */

namespace immonex\Kickstart\Team;

/**
 * Base class for processing Schema.org related data of one property.
 */
class Base_Schema {

	/**
	 * Entity post object
	 *
	 * @var \WP_Post
	 */
	protected $post;

	/**
	 * Entity data
	 *
	 * @var mixed[]
	 */
	protected $entity_data = [];

	/**
	 * Main entity element data
	 *
	 * @var mixed[]
	 */
	protected $main_entity_element = [];

	/**
	 * Detail page graph data
	 *
	 * @var mixed[]
	 */
	protected $detail_page_graph = [];

	/**
	 * Plugin options and other component configuration data
	 *
	 * @var mixed[]
	 */
	protected $config;

	/**
	 * Helper/Utility objects
	 *
	 * @var object[]
	 */
	protected $utils;

	/**
	 * Constructor
	 *
	 * @since 1.7.0-beta
	 *
	 * @param mixed[]  $config Various component configuration data.
	 * @param object[] $utils  Helper/Utility objects.
	 */
	public function __construct( $config, $utils ) {
		$this->config = $config;
		$this->utils  = $utils;
	} // __construct

	/**
	 * Set the current entity (agency/agent) post object and reset existing object properties.
	 *
	 * @since 1.7.0-beta
	 *
	 * @param int $post_id Entity post ID.
	 */
	public function set_post_id( $post_id ): void {
		$this->post = get_post( $post_id );
		if (
			! is_a( $this->post, '\WP_Post' )
			|| 'publish' !== $this->post->post_status
		) {
			$this->post = null;
		}

		$this->entity_data         = [];
		$this->main_entity_element = [];
		$this->detail_page_graph   = [];
	} // set_post_id

	/**
	 * Return the complete schema graph data for embedding in detail pages.
	 *
	 * @since 1.7.0-beta
	 *
	 * @param bool $as_script_block Optional return format: true for an embed-ready
	 *                              script block, false for the raw data array (default).
	 *
	 * @return mixed[]|string Schema graph.
	 */
	public function get_detail_page_graph( $as_script_block = false ): array|string {
		if ( empty( $this->post ) ) {
			return $as_script_block ? '' : [];
		}

		if ( ! empty( $this->detail_page_graph ) ) {
			return $as_script_block ?
				$this->detail_page_graph['script_block'] :
				$this->detail_page_graph['raw'];
		}

		$this->add_web_page_element();
		$entity_element = $this->get_main_entity_element( 'full' );
		if ( ! empty( $entity_element ) ) {
			$this->detail_page_graph[] = $entity_element['raw'];
		}

		return $as_script_block ?
			$this->get_json_ld_script_block( [ '@graph' => $this->detail_page_graph ], true ) :
			$this->detail_page_graph;
	} // get_detail_page_graph

	/**
	 * Generate an ID for a schema entity.
	 *
	 * @since 1.7.0-beta
	 *
	 * @param string|int      $url  Entity URL or post ID as fallback.
	 * @param string|string[] $type Entity type(s).
	 *
	 * @return string Entity Schema ID.
	 */
	public function get_schema_id( $url, $type ): string {
		$type = is_array( $type ) ? array_pop( $type ) : $type;

		return "{$url}#" . $this->utils['string']->slugify( $type );
	} // get_schema_id

	/**
	 * Return a JSON-LD script block with the given schema data.
	 *
	 * @since 1.7.0-beta
	 *
	 * @param mixed[] $schema_data Schema data.
	 * @param bool    $add_info    Whether to add generator info as HTML comment
	 *                             (optional, false by default).
	 *
	 * @return Script block with JSON-LD data.
	 */
	public function get_json_ld_script_block( $schema_data, $add_info = false ): string {
		$schema_data = array_merge(
			[ '@context' => 'https://schema.org' ],
			$schema_data
		);

		$script_block  = '<script type="application/ld+json">' . PHP_EOL;
		$script_block .= wp_json_encode( $schema_data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT );
		$script_block .= PHP_EOL . '</script>' . PHP_EOL;

		if ( $add_info ) {
			$info = wp_sprintf(
				/* translators: %1$s = plugin version, %2$s = plugin home URL */
				__( 'Structured data (Schema.org) generated by immonex® Kickstart Team Add-on %1$s – Real Estate Plugin (Open Source) – %2$s', 'immonex-kickstart-team' ),
				$this->config['plugin_version'],
				$this->config['plugin_home_url']
			);
			$script_block = PHP_EOL . '<!-- ' . esc_html( $info ) . ' -->' . PHP_EOL . $script_block;
		}

		return $script_block;
	} // get_json_ld_script_block

	/**
	 * Retrieve (if not already done) and return a complete template data array
	 * of the current entity (agency/agent).
	 *
	 * @since 1.7.0-beta
	 *
	 * @return mixed[] Entity data.
	 */
	protected function get_entity_data(): array {
		if (
			! empty( $this->entity_data )
			|| empty( $this->post )
		) {
			return $this->entity_data;
		}

		$this->entity_data = apply_filters(
			'inx_team_get_' . static::ENTITY_TYPE . '_template_data',
			[],
			[ 'post_id' => $this->post->ID ]
		);

		return $this->entity_data;
	} // get_entity_data

	/**
	 * Add a WebPage element to the detail page graph.
	 *
	 * @since 1.7.0-beta
	 */
	protected function add_web_page_element(): void {
		$entity_data = $this->get_entity_data();
		if ( empty( $entity_data ) ) {
			return;
		}

		// Internal filter.
		$entity_schema_types = apply_filters( 'inx_team_' . static::ENTITY_TYPE . '_schema_types', static::ENTITY_SCHEMA_TYPES );

		$this->detail_page_graph[] = [
			'@type'      => 'WebPage',
			'@id'        => $this->get_schema_id( $entity_data['permalink_url'], 'WebPage' ),
			'url'        => $entity_data['permalink_url'],
			'mainEntity' => [
				'@id' => $this->get_schema_id( $entity_data['permalink_url'], $entity_schema_types[0] ),
			],
		];
	} // add_web_page_element

	/**
	 * Create and return the "address" element based on the current entity data.
	 *
	 * @since 1.7.0-beta
	 *
	 * @param string|int $url Entity URL or post ID as fallback (for ID generation).
	 *
	 * @return mixed[] Entity address element.
	 */
	protected function get_address_element( $url = '' ): array {
		$entity_data = $this->get_entity_data();
		if ( empty( $entity_data ) ) {
			return [];
		}

		$street   = $entity_data['elements']['address_publishing_approved']['value'] ?
			trim( $entity_data['elements']['street']['value'] . ' ' . $entity_data['elements']['house_number']['value'] ) : '';
		$postcode = $entity_data['elements']['zip_code']['value'];
		$locality = $entity_data['elements']['city']['value'];
		$country  = $entity_data['elements']['country_iso']['value'];

		if ( $street || $postcode || $locality || $country ) {
			return array_filter(
				[
					'@type'           => 'PostalAddress',
					'@id'             => $url ? $this->get_schema_id( $url, 'address' ) : null,
					'streetAddress'   => $street ? $street : null,
					'postalCode'      => $postcode ? $postcode : null,
					'addressLocality' => $locality ? $locality : null,
					'addressCountry'  => $country ? $this->utils['geo']->convert_iso_country_code( $country ) : null,
				]
			);
		}

		return [];
	} // get_address_element

	/**
	 * Create and return a "geo" element with agency/agent coordinates.
	 *
	 * @since 1.7.0-beta
	 *
	 * @param string|int $url Entity URL or post ID as fallback (for ID generation).
	 *
	 * @return mixed[] Entity geo element.
	 */
	protected function get_geo_element( $url = '' ): array {
		$entity_data = $this->get_entity_data();
		if ( empty( $entity_data ) ) {
			return [];
		}

		$lat = ! empty( $entity_data['elements']['coords']['value']['lat'] ) ?
			$entity_data['elements']['coords']['value']['lat'] : '';
		$lng = ! empty( $entity_data['elements']['coords']['value']['lng'] ) ?
			$entity_data['elements']['coords']['value']['lng'] : '';

		if ( $lat && $lng ) {
			return array_filter(
				[
					'@type'     => 'GeoCoordinates',
					'@id'       => $url ? $this->get_schema_id( $url, 'geo' ) : null,
					'latitude'  => $lat,
					'longitude' => $lng,
				]
			);
		}

		return [];
	} // get_geo_element

	/**
	 * Compile URLs of public network/social media URLs of the current agency/agent.
	 *
	 * @since 1.7.0-beta
	 *
	 * @return mixed[] Entity network URLs.
	 */
	protected function get_network_urls(): array {
		$entity_data = $this->get_entity_data();
		$urls        = [];

		if ( ! empty( $entity_data['elements']['network_urls']['value'] ) ) {
			foreach ( $entity_data['elements']['network_urls']['value'] as $network ) {
				$urls[] = $network['url'];
			}
		}

		return $urls;
	} // get_network_urls

} // Base_Schema
